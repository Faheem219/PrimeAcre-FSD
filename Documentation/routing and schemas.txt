1.  Property Resource 

| Name    | Path                     | Verb   | Purpose                                                                 |
|---------|--------------------------|--------|-------------------------------------------------------------------------|
| Index   | `/properties`            | GET    | Display all available properties.                                       |
| New     | `/properties/new`        | GET    | Form to create a new property listing.                                  |
| Create  | `/properties`            | POST   | Creates a new property listing.                                         |
| Show    | `/properties/:id`        | GET    | Show details of a specific property.                                    |
| Edit    | `/properties/:id/edit`   | GET    | Form to edit a specific property.                                       |
| Update  | `/properties/:id`        | PATCH  | Update an existing property.                                            |
| Destroy | `/properties/:id`        | DELETE | Remove a property listing.                                              |

2.  Agent Resource 

| Name    | Path                     | Verb   | Purpose                                                                |
|---------|--------------------------|--------|------------------------------------------------------------------------|
| Index   | `/agents`                | GET    | Display all agents.                                                    |
| Show    | `/agents/:id`            | GET    | Show details of a specific agent.                                      |
| Create  | `/agents`                | POST   | Add a new agent.                                                       |
| Destroy | `/agents/:id`            | DELETE | Remove an agent.                                                       |

3.  Client Resource 

| Name    | Path                     | Verb   | Purpose                                                                |
|---------|--------------------------|--------|------------------------------------------------------------------------|
| Index   | `/clients`               | GET    | Display all clients.                                                   |
| Show    | `/clients/:id`           | GET    | Show details of a specific client.                                     |
| Create  | `/clients`               | POST   | Add a new client.                                                      |

4.  Review Resource 

| Name    | Path                                              | Verb   | Purpose                                       |
|---------|---------------------------------------------------|--------|-----------------------------------------------|
| Create  | `/properties/:id/reviews`                         | POST   | Submit a review for a specific property.      |
| Index   | `/properties/:id/reviews`                         | GET    | View all reviews for a specific property.     |
| Edit    | `/properties/:propertyId/reviews/:reviewId/edit`  | GET    | Form to edit a specific review.               |
| Update  | `/properties/:propertyId/reviews/:reviewId`       | PATCH  | Update an existing review.                    |
| Destroy | `/properties/:propertyId/reviews/:reviewId`       | DELETE | Delete a review.                              |

---

Updated  MongoDB Schemas :

  1.  Property Schema 

const mongoose = require('mongoose');

const propertySchema = new mongoose.Schema({
  title: {
    type: String,
    required: true,
  },
  description: {
    type: String,
    required: true,
  },
  price: {
    type: Number,
    required: true,
  },
  location: {
    type: String,
    required: true,
  },
  size: {
    type: Number, // In square feet
  },
  bedrooms: {
    type: Number,
  },
  bathrooms: {
    type: Number,
  },
  propertyType: {
    type: String,
    enum: ['Apartment', 'House', 'Condo', 'Land', 'Commercial'],
    required: true,
  },
  status: {
    type: String,
    enum: ['Available', 'Sold', 'Pending'],
    default: 'Available',
  },
  agent: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'Agent',
    required: true,
  },
  reviews: [{
    type: mongoose.Schema.Types.ObjectId,
    ref: 'Review',
  }],
  images: [{
    type: String, // URL of property images
  }],
  dateListed: {
    type: Date,
    default: Date.now,
  },
}, { timestamps: true });

const Property = mongoose.model('Property', propertySchema);
module.exports = Property;

  2.  Agent Schema 

const mongoose = require('mongoose');

const agentSchema = new mongoose.Schema({
  firstName: {
    type: String,
    required: true,
  },
  lastName: {
    type: String,
    required: true,
  },
  email: {
    type: String,
    required: true,
    unique: true,
  },
  phone: {
    type: String,
    required: true,
  },
  agency: {
    type: String,
  },
  properties: [{
    type: mongoose.Schema.Types.ObjectId,
    ref: 'Property',
  }],
}, { timestamps: true });

const Agent = mongoose.model('Agent', agentSchema);
module.exports = Agent;

  3.  Client Schema 

const mongoose = require('mongoose');

const clientSchema = new mongoose.Schema({
  firstName: {
    type: String,
    required: true,
  },
  lastName: {
    type: String,
    required: true,
  },
  email: {
    type: String,
    required: true,
    unique: true,
  },
  phone: {
    type: String,
    required: true,
  },
  interestedProperties: [{
    type: mongoose.Schema.Types.ObjectId,
    ref: 'Property',
  }],
}, { timestamps: true });

const Client = mongoose.model('Client', clientSchema);
module.exports = Client;

  4.  Review Schema (with "edit" property) 

const mongoose = require('mongoose');

const reviewSchema = new mongoose.Schema({
  property: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'Property',
    required: true,
  },
  client: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'Client',
    required: true,
  },
  rating: {
    type: Number,
    min: 1,
    max: 5,
    required: true,
  },
  comment: {
    type: String,
  },
  edit: {
    type: Boolean,
    default: false, // Track if the review was edited
  },
  date: {
    type: Date,
    default: Date.now,
  },
}, { timestamps: true });

const Review = mongoose.model('Review', reviewSchema);
module.exports = Review;

---
